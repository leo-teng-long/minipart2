
Package mini;

Helpers

  all                = [0..0xffff];
  digit              = ['0'..'9'];
  lowercase          = ['a'..'z'];
  uppercase          = ['A'..'Z'];
  letter             = lowercase | uppercase;
  letter_or_us       = letter | '_';
  letter_digit_or_us = letter | digit | '_';
  separator          = ',' | '.' | '?' | '!';
  space              = ' ';
  tab                = 9;
  cr                 = 13;
  lf                 = 10;

Tokens

  var    = 'var';
  int    = 'int';
  float  = 'float';
  string = 'string';
  while  = 'while';
  do     = 'do';
  done   = 'done';
  if     = 'if';
  then   = 'then';
  else   = 'else';
  endif  = 'endif';
  read   = 'read';
  print  = 'print';

  equal  = '=';
  plus   = '+';
  minus  = '-';
  mul    = '*';
  div    = '/';
  l_par  = '(';
  r_par  = ')';
  col    = ':';
  semi   = ';';

  id          = letter_or_us letter_digit_or_us*;
  intconst    = '0' | [digit - '0'] digit*;
  floatconst  = ('0' | [digit - '0'] digit*) '.' digit* | '.' digit+;
  stringconst = '"' (letter | digit | space | separator)* '"';

  comment = '#' [all - lf]* lf;
  blank   = (space | tab)+;
  eol     = cr | lf | cr lf;

Ignored Tokens

  comment, blank, eol;

Productions

  prog {-> prog} =
    {program}             decl_list stmt_list
                          {-> New prog.program([decl_list.decl], [stmt_list.stmt])};

  decl_list {-> decl*} =
    {list}                decl_list decl
                          {-> [decl_list.decl, decl.decl]}
  | {empty}               {-> []};

  decl {-> decl} =
    {declare}             var id col type semi
                          {-> New decl.declare(id, type)};

  type {-> type} =
    {int}                 int
                          {-> New type.int(int)}
  | {float}               float
                          {-> New type.float(float)}
  | {string}              string
                          {-> New type.string(string)};

  stmt_list {-> stmt*} =
    {list}                stmt_list stmt
                          {-> [stmt_list.stmt, stmt.stmt]}
  | {empty}               {-> []};

  stmt {-> stmt} =
    {assign}              assign
                          {-> assign.stmt}
  | {ifelse}              ifelse
                          {-> ifelse.stmt}
  | {loop}                loop
                          {-> loop.stmt}
  | {input}               input
                          {-> input.stmt}
  | {output}              output
                          {-> output.stmt};

  assign {-> stmt} =
    {assign}              id equal expr semi
                          {-> New stmt.assign(id, expr.expr)};

  ifelse {-> stmt} =
    {if}                  if expr then stmt_list endif
                          {-> New stmt.if(expr.expr, [stmt_list.stmt])}
  | {ifelse}              if expr then [then_stmts]:stmt_list else [else_stmts]:stmt_list endif
                          {-> New stmt.ifelse(expr.expr, [then_stmts.stmt], [else_stmts.stmt])};

  loop {-> stmt} =
    {while}               while expr do stmt_list done
                          {-> New stmt.while(expr.expr, [stmt_list.stmt])};

  input {-> stmt} =
    {read}                read id semi
                          {-> New stmt.read(id)};

  output {-> stmt} =
    {print}               print expr semi
                          {-> New stmt.print(expr.expr)};

  expr {-> expr} =
    {plus}                expr plus factor
                          {-> New expr.plus(expr.expr, factor.expr)}
  | {minus}               expr minus factor
                          {-> New expr.minus(expr.expr, factor.expr)}
  | {factor}              factor
                          {-> factor.expr};

  factor {-> expr} =
    {multiply}            factor mul term
                          {-> New expr.multiply(factor.expr, term.expr)}
  | {divide}              factor div term
                          {-> New expr.divide(factor.expr, term.expr)}
  | {term}                term
                          {-> term.expr};

  term {-> expr} =
    {paren}               l_par expr r_par
                          {-> expr.expr}
  | {unary}               minus term
                          {-> New expr.unary(term.expr)}
  | {id}                  id
                          {-> New expr.id(id)}
  | {int}                 intconst
                          {-> New expr.int(intconst)}
  | {float}               floatconst
                          {-> New expr.float(floatconst)}
  | {string}              stringconst
                          {-> New expr.string(stringconst)};

Abstract Syntax Tree

  prog =
    {program}   [decl_list]:decl* [stmt_list]:stmt*;

  decl =
    {declare}   [id]:id [type]:type;

  type =
    {int}       int
  | {float}     float
  | {string}    string;

  stmt =
    {assign}    [id]:id [expr]:expr
  | {if}        [expr]:expr [then_stmts]:stmt*
  | {ifelse}    [expr]:expr [then_stmts]:stmt* [else_stmts]:stmt*
  | {while}     [expr]:expr [do_stmts]:stmt*
  | {read}      id
  | {print}     expr;

  expr =
    {plus}      [left]:expr [right]:expr
  | {minus}     [left]:expr [right]:expr
  | {multiply}  [left]:expr [right]:expr
  | {divide}    [left]:expr [right]:expr
  | {unary}     expr
  | {id}        id
  | {int}       intconst
  | {float}     floatconst
  | {string}    stringconst;
