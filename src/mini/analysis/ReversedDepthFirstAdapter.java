/* This file was generated by SableCC (http://www.sablecc.org/). */

package mini.analysis;

import java.util.*;
import mini.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProg().apply(this);
        outStart(node);
    }

    public void inAProgramProg(AProgramProg node)
    {
        defaultIn(node);
    }

    public void outAProgramProg(AProgramProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramProg(AProgramProg node)
    {
        inAProgramProg(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmtList());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDeclList());
            Collections.reverse(copy);
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramProg(node);
    }

    public void inADeclareDecl(ADeclareDecl node)
    {
        defaultIn(node);
    }

    public void outADeclareDecl(ADeclareDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclareDecl(ADeclareDecl node)
    {
        inADeclareDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADeclareDecl(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAFloatType(AFloatType node)
    {
        defaultIn(node);
    }

    public void outAFloatType(AFloatType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatType(AFloatType node)
    {
        inAFloatType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getThenStmts());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAIfelseStmt(AIfelseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfelseStmt(AIfelseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseStmt(AIfelseStmt node)
    {
        inAIfelseStmt(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getElseStmts());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getThenStmts());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAIfelseStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getDoStmts());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAReadStmt(AReadStmt node)
    {
        defaultIn(node);
    }

    public void outAReadStmt(AReadStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadStmt(AReadStmt node)
    {
        inAReadStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAReadStmt(node);
    }

    public void inAPrintStmt(APrintStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintStmt(APrintStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStmt(APrintStmt node)
    {
        inAPrintStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAPrintStmt(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAMultiplyExpr(AMultiplyExpr node)
    {
        defaultIn(node);
    }

    public void outAMultiplyExpr(AMultiplyExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyExpr(AMultiplyExpr node)
    {
        inAMultiplyExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultiplyExpr(node);
    }

    public void inADivideExpr(ADivideExpr node)
    {
        defaultIn(node);
    }

    public void outADivideExpr(ADivideExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExpr(ADivideExpr node)
    {
        inADivideExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivideExpr(node);
    }

    public void inAUnaryExpr(AUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryExpr(AUnaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryExpr(AUnaryExpr node)
    {
        inAUnaryExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAUnaryExpr(node);
    }

    public void inAIdExpr(AIdExpr node)
    {
        defaultIn(node);
    }

    public void outAIdExpr(AIdExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExpr(AIdExpr node)
    {
        inAIdExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExpr(node);
    }

    public void inAIntExpr(AIntExpr node)
    {
        defaultIn(node);
    }

    public void outAIntExpr(AIntExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpr(AIntExpr node)
    {
        inAIntExpr(node);
        if(node.getIntconst() != null)
        {
            node.getIntconst().apply(this);
        }
        outAIntExpr(node);
    }

    public void inAFloatExpr(AFloatExpr node)
    {
        defaultIn(node);
    }

    public void outAFloatExpr(AFloatExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatExpr(AFloatExpr node)
    {
        inAFloatExpr(node);
        if(node.getFloatconst() != null)
        {
            node.getFloatconst().apply(this);
        }
        outAFloatExpr(node);
    }

    public void inAStringExpr(AStringExpr node)
    {
        defaultIn(node);
    }

    public void outAStringExpr(AStringExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpr(AStringExpr node)
    {
        inAStringExpr(node);
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        outAStringExpr(node);
    }
}
