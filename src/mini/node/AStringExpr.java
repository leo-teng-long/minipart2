/* This file was generated by SableCC (http://www.sablecc.org/). */

package mini.node;

import mini.analysis.*;

@SuppressWarnings("nls")
public final class AStringExpr extends PExpr
{
    private TStringconst _stringconst_;

    public AStringExpr()
    {
        // Constructor
    }

    public AStringExpr(
        @SuppressWarnings("hiding") TStringconst _stringconst_)
    {
        // Constructor
        setStringconst(_stringconst_);

    }

    @Override
    public Object clone()
    {
        return new AStringExpr(
            cloneNode(this._stringconst_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStringExpr(this);
    }

    public TStringconst getStringconst()
    {
        return this._stringconst_;
    }

    public void setStringconst(TStringconst node)
    {
        if(this._stringconst_ != null)
        {
            this._stringconst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stringconst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stringconst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stringconst_ == child)
        {
            this._stringconst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stringconst_ == oldChild)
        {
            setStringconst((TStringconst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
